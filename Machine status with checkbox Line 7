// ==UserScript==
// @name         Скрытие таблиц на странице
// @namespace    http://tampermonkey.net/
// @version      0.1
// @description  Добавляет чекбоксы для скрытия и отображения таблиц на странице
// @author       Syvorotkin Denys
// @match        https://ldz-prof-rpt.na.pg.com:88/Thingworx/Runtime/index.html?mashup=NEW_DowntimeSingle_PG_Master_V3&forceClose=true&__enableBMF=true&
// @grant        none
// ==/UserScript==

(function() {
    // Функция для скрытия или отображения элемента по его id
    function toggleElementVisibility(elementId, hide) {
        var elementToToggle = document.getElementById(elementId);
        if (elementToToggle) {
            elementToToggle.style.display = hide ? 'none' : 'table-row';
        }
    }

  // Функция для создания и добавления кастомного чекбокса
function addHideCheckbox(checkboxLabel, elementId) {
    var checkboxContainer = document.createElement('label');
    checkboxContainer.style.fontSize = '14px';
    checkboxContainer.style.fontWeight = 'normal';
    checkboxContainer.style.marginRight = '10px';

    // Создаем скрытый стандартный чекбокс
    var checkbox = document.createElement('input');
    checkbox.type = 'checkbox';
    checkbox.style.display = 'none';
    checkbox.checked = true; // Установим значение checked в true
    checkbox.addEventListener('change', function () {
        toggleElementVisibility(elementId, !this.checked); // Изменим логику скрытия
    });

    // Создаем стили для кастомного чекбокса
    var customCheckbox = document.createElement('div');
    customCheckbox.style.display = 'inline-block';
    customCheckbox.style.width = '14px'; // Размер кастомного чекбокса
    customCheckbox.style.height = '14px'; // Размер кастомного чекбокса
    customCheckbox.style.border = '1px solid #5CFF88'; // Зеленая рамка
    customCheckbox.style.backgroundColor = '#8DFFAC'; // Зеленый фон
    customCheckbox.style.borderRadius = '35px'; // Скругление углов

    // Обработчик события для синхронизации состояния кастомного чекбокса с стандартным
    checkbox.addEventListener('change', function () {
        if (this.checked) {
            customCheckbox.style.backgroundColor = '#8DFFAC';
            customCheckbox.style.border = '1px solid #5CFF88'; // Зеленая рамка
        } else {
            customCheckbox.style.backgroundColor = '#FFABAB';
            customCheckbox.style.border = '1px solid #FF6E6E'; // красная рамка
        }
    });

    checkboxContainer.appendChild(checkbox);
    checkboxContainer.appendChild(customCheckbox);
    checkboxContainer.appendChild(document.createTextNode(checkboxLabel));

    return checkboxContainer;
}

    // Функция для обработки клика на кнопку "Включить/отключить все"
    function toggleAllCheckboxes(checkboxes, toggle) {
        for (var i = 0; i < checkboxes.length; i++) {
            checkboxes[i].checked = toggle;
            var elementId = checkboxes[i].getAttribute('data-element-id');
            toggleElementVisibility(elementId, !toggle);
            checkboxes[i].dispatchEvent(new Event('change')); // Имитируем событие 'change' для обработки скрытия/отображения элементов
        }
    }

 var element = document.getElementById('root_mashupcontainer-25_container-93'); // Укажите id вашего элемента
    if (element) {
        element.style.borderRadius = '20px'; // Установите желаемый радиус
    }

   // Создаем контейнер для чекбоксов
var newLine = document.createElement('br');
var checkboxContainer = document.createElement('div');
checkboxContainer.style.position = 'fixed';
checkboxContainer.style.top = '11%';
checkboxContainer.style.left = '16%';
checkboxContainer.style.right = '26.8%';
checkboxContainer.style.zIndex = '1510';
checkboxContainer.style.background = '#fff';
checkboxContainer.style.padding = '10px';
checkboxContainer.style.border = '1px solid #D2FFFE';
checkboxContainer.style.borderRadius = '10px';

// Добавляем чекбоксы для каждой пары данных и помещаем их в контейнер

checkboxContainer.appendChild(addHideCheckbox("DH 19", "root_mashupcontainer-25_repeater-236-row-1"));
checkboxContainer.appendChild(addHideCheckbox("DH 20", "root_mashupcontainer-25_repeater-236-row-2"));
checkboxContainer.appendChild(addHideCheckbox("DH 21", "root_mashupcontainer-25_repeater-236-row-3"));
checkboxContainer.appendChild(addHideCheckbox("DH 22", "root_mashupcontainer-25_repeater-236-row-4"));
checkboxContainer.appendChild(addHideCheckbox("DH 23", "root_mashupcontainer-25_repeater-236-row-5"));
checkboxContainer.appendChild(addHideCheckbox("DH 24", "root_mashupcontainer-25_repeater-236-row-6"));
checkboxContainer.appendChild(addHideCheckbox("DH 26", "root_mashupcontainer-25_repeater-236-row-7"));
checkboxContainer.appendChild(addHideCheckbox("DH 30", "root_mashupcontainer-25_repeater-236-row-8"));
checkboxContainer.appendChild(addHideCheckbox("DH 31", "root_mashupcontainer-25_repeater-236-row-9"));
checkboxContainer.appendChild(addHideCheckbox("DH 06", "root_mashupcontainer-25_repeater-236-row-10"));
checkboxContainer.appendChild(addHideCheckbox("DH 33", "root_mashupcontainer-25_repeater-236-row-11"));
checkboxContainer.appendChild(addHideCheckbox("DH 34", "root_mashupcontainer-25_repeater-236-row-12"));
checkboxContainer.appendChild(addHideCheckbox("DH 11", "root_mashupcontainer-25_repeater-236-row-13"));
checkboxContainer.appendChild(addHideCheckbox("DH 14", "root_mashupcontainer-25_repeater-236-row-14"));
checkboxContainer.appendChild(newLine);
checkboxContainer.appendChild(addHideCheckbox("DH 16", "root_mashupcontainer-25_repeater-236-row-15"));
checkboxContainer.appendChild(addHideCheckbox("DH 17", "root_mashupcontainer-25_repeater-236-row-16"));
checkboxContainer.appendChild(addHideCheckbox("DH 18", "root_mashupcontainer-25_repeater-236-row-17"));
checkboxContainer.appendChild(addHideCheckbox("DH 09", "root_mashupcontainer-25_repeater-236-row-18"));
checkboxContainer.appendChild(addHideCheckbox("DH 10", "root_mashupcontainer-25_repeater-236-row-19"));
checkboxContainer.appendChild(addHideCheckbox("DH 13", "root_mashupcontainer-25_repeater-236-row-20"));
checkboxContainer.appendChild(addHideCheckbox("DH 15", "root_mashupcontainer-25_repeater-236-row-21"));
checkboxContainer.appendChild(addHideCheckbox("DH 32", "root_mashupcontainer-25_repeater-236-row-22"));
checkboxContainer.appendChild(addHideCheckbox("DH 35", "root_mashupcontainer-25_repeater-236-row-23"));
checkboxContainer.appendChild(addHideCheckbox("DH 36", "root_mashupcontainer-25_repeater-236-row-24"));
checkboxContainer.appendChild(addHideCheckbox("DH 37", "root_mashupcontainer-25_repeater-236-row-25"));
checkboxContainer.appendChild(addHideCheckbox("DH 38", "root_mashupcontainer-25_repeater-236-row-26"));
checkboxContainer.appendChild(addHideCheckbox("DH 39", "root_mashupcontainer-25_repeater-236-row-27"));


    // Добавляем кнопку "Включить/отключить все"
    var toggleAllButton = document.createElement('button');
    toggleAllButton.textContent = 'Hide all';
    toggleAllButton.style.background = '#D2FFFE';
    toggleAllButton.style.color = '#000';
    toggleAllButton.style.border = '2px solid #C6FCE6';
    toggleAllButton.style.borderRadius = '5px';
    toggleAllButton.style.padding = '5px 10px';
    var allCheckboxes = checkboxContainer.querySelectorAll('input[type="checkbox"]');
    toggleAllButton.addEventListener('click', function() {
        var toggle = false;
        for (var i = 0; i < allCheckboxes.length; i++) {
            allCheckboxes[i].checked = !allCheckboxes[i].checked;
            var elementId = allCheckboxes[i].getAttribute('data-element-id');
            toggleElementVisibility(elementId, !allCheckboxes[i].checked);
            allCheckboxes[i].dispatchEvent(new Event('change'));
            if (allCheckboxes[i].checked) {
                toggle = true;
            }
        }
        toggleAllButton.textContent = toggle ? 'Hide all' : 'Show all';
    });

    checkboxContainer.appendChild(toggleAllButton);

    // Добавляем контейнер с чекбоксами и кнопкой на страницу
    document.body.appendChild(checkboxContainer);
})();
