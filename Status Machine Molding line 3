// ==UserScript==
// @name         Status Maszyn, Selected Machine
// @namespace    http://tampermonkey.net/
// @version      0.1
// @description  Добавляет чекбоксы для скрытия и отображения таблиц на странице
// @author       Syvorotkin Denys
// @match        https://ldz-prof-pdp.na.pg.com:88/Thingworx/Runtime/index.html?mashup=NEW_DowntimeSingle_PG_Master_V3&forceClose=true&__enableBMF=true&
// @grant        GM_addStyle
// ==/UserScript==

(function() {
    'use strict';

    // Глобальная переменная для элемента
    var targetElement = null;

    // Функция для скрытия или отображения элемента по его id
    function toggleElementVisibility(elementId, hide) {
        var elementToToggle = document.getElementById(elementId);
        if (elementToToggle) {
            elementToToggle.style.display = hide ? 'none' : 'table-row';
        }
    }

    // Функция для замены текста в текстовых узлах
    function replaceTextInTextNodes(node, language) {
        if (node.nodeType === Node.TEXT_NODE) {
            if (language === 'Russian') {
                // Здесь ваши замены текста для русского языка
                node.textContent = node.textContent.replace(/Opcja czasu/g, 'Выбор смены:');
                node.textContent = node.textContent.replace(/Up/g, 'Работает');
                node.textContent = node.textContent.replace(/Unplanned/g, 'Неплан. остановка');
                node.textContent = node.textContent.replace(/PR Out/g, 'Остановлена');
                node.textContent = node.textContent.replace(/Planned/g, 'План. остановка');
                // Машины
                node.textContent = node.textContent.replace(/GVCCA219 S1 HdlE Sys 219 DH19/g, 'DH 19');
                node.textContent = node.textContent.replace(/GVCCB220 S1 HdlE Sys 220 DH20/g, 'DH 20');
                node.textContent = node.textContent.replace(/GVCCC221 S1 HdlE Sys 221 DH21/g, 'DH 21');
                node.textContent = node.textContent.replace(/GVCCD222 S1 HdlE Sys 222 DH22/g, 'DH 22');
                node.textContent = node.textContent.replace(/GVCCE223 S1 HdlE Sys 223 DH23/g, 'DH 23');
                node.textContent = node.textContent.replace(/GVCCH226 S1 HdlE Sys 226 DH26/g, 'DH 26');
                node.textContent = node.textContent.replace(/GVCCL230 S1 HdlE Sys 230 DH30/g, 'DH 30');
                node.textContent = node.textContent.replace(/GVCCM231 S1 HdlE Sys 231 DH31/g, 'DH 31');
                node.textContent = node.textContent.replace(/GVCVC206 S1 MHdl Sys 206 DH06/g, 'DH 06');
                node.textContent = node.textContent.replace(/GVCVF233 S1 MHdl Sys 218 DH33/g, 'DH 33');
                node.textContent = node.textContent.replace(/GVCVG234 S1 MHdl Sys 234 DH34/g, 'DH 34');
                node.textContent = node.textContent.replace(/GVETB211 Fus\/PG MO Sys 211 DH11/g, 'DH 11');
                node.textContent = node.textContent.replace(/GVETC214 Fus\/PG MO Sys 214 DH14/g, 'DH 14');
                node.textContent = node.textContent.replace(/GVFAA216 Agil Hdl Sys 216 DH16/g, 'DH 16');
                node.textContent = node.textContent.replace(/GVFAB217 Agil Hdl Sys 217 DH17/g, 'DH 17');
                node.textContent = node.textContent.replace(/GVFAC218 Agil Hdl Sys 218 DH18/g, 'DH 18');
                node.textContent = node.textContent.replace(/GVFAD209 Agil Hdl Sys 209 DH09/g, 'DH 09');
                node.textContent = node.textContent.replace(/GVMAA210 OffB Hdl Sys 210 DH10/g, 'DH 10');
                node.textContent = node.textContent.replace(/GVMAB213 OffB Hdl Sys 213 DH13/g, 'DH 13');
                node.textContent = node.textContent.replace(/GVMAC215 OffB Hdl Sys 215 DH15/g, 'DH 15');
                node.textContent = node.textContent.replace(/GVCCN232 S1 HdlE Sys 232 DH32/g, 'DH 32');
                node.textContent = node.textContent.replace(/GVDCA235 S2 HdlE Sys 235 DH35/g, 'DH 35');
                node.textContent = node.textContent.replace(/GVFAE236 Agil Hdl Sys 236 DH36/g, 'DH 36');
                node.textContent = node.textContent.replace(/GVFAF237 Agil Hdl Sys 237 DH37/g, 'DH 37');
                node.textContent = node.textContent.replace(/GVPAA238 Perm Hdl Sys 238/g, 'DH 38');
                node.textContent = node.textContent.replace(/GVCCP239 S1 HdlE Sys 239 DH39/g, 'DH 39');

                node.textContent = node.textContent.replace(/GVCCQ240 S1 HdlE Sys 240 DH40/g, 'DH 40');
                node.textContent = node.textContent.replace(/GVCHC208 S1 OC Sys 208 DO08/g, 'DO 08');
                node.textContent = node.textContent.replace(/GVCHE211 S1 OC Sys 211 DO11/g, 'DO 11');
                node.textContent = node.textContent.replace(/GVCHA201 S1 OC Sys 201 DO01/g, 'DO 01');
                node.textContent = node.textContent.replace(/GVCHB203 S1 OC Sys 203 DO03/g, 'DO 03');
                node.textContent = node.textContent.replace(/GVCKB203 S1 Plat Sys 203 DA03/g, 'DA 03');
                node.textContent = node.textContent.replace(/GVCKC206 S1 Plat Sys 206 DP06/g, 'DP 06');
                node.textContent = node.textContent.replace(/GVCKE211 S1 Plat Sys 211 DP11/g, 'DP 11');
                node.textContent = node.textContent.replace(/GVCLA205 S1 Cap Sys 205 DA05/g, 'DA 05');
                node.textContent = node.textContent.replace(/GVCLB212 S1 Cap Sys 212 DP12/g, 'DP 12');
                node.textContent = node.textContent.replace(/GVCLC213 S1 Cap Sys 213 DP13/g, 'DP 13');
                node.textContent = node.textContent.replace(/GVCMA201 S1 CapP Sys 201 DA01/g, 'DA 01');
                node.textContent = node.textContent.replace(/GVCMB205 S1 CapP Sys 205 DP05/g, 'DP 05');
                node.textContent = node.textContent.replace(/GVCMC209 S1 CapP Sys 209 DA09/g, 'DA 09');
                node.textContent = node.textContent.replace(/GVCMD210 S1 CapP Sys 210 DA10/g, 'DA 10');
                node.textContent = node.textContent.replace(/GVDHB207 S2 OC Sys 207 DO07/g, 'DO 07');
                node.textContent = node.textContent.replace(/GVDHC210 S2 OC Sys 210 DO10/g, 'DO 10');
                node.textContent = node.textContent.replace(/GVDKB208 S2 Plat Sys 208 DP08/g, 'DP 08');
                node.textContent = node.textContent.replace(/GVDMA210 S2 CapP Sys 210 DP10/g, 'DP 10');
                node.textContent = node.textContent.replace(/GVQEA201 GII Disp Sys 201 DD01/g, 'DD 01');
                node.textContent = node.textContent.replace(/GVQKA206 GII Plat Sys 206 DA06/g, 'DA 06');
                node.textContent = node.textContent.replace(/Switch/g, 'Сменить');
                node.textContent = node.textContent.replace(/% PR/g, '% ПП');
                node.textContent = node.textContent.replace(/Scrap/g, 'Лом');
                node.textContent = node.textContent.replace(/#Unpl Stops\/Day/g, 'Неплан. Ост\/День');
            } else if (language === 'Standart') {
                // Здесь ваши замены текста для стандартного языка
                 node.textContent = node.textContent.replace(/Выбор смены:/g, 'Opcja czasu');
                node.textContent = node.textContent.replace(/Работает/g, 'Up');
                node.textContent = node.textContent.replace(/Неплан. остановка/g, 'Unplanned');
                node.textContent = node.textContent.replace(/Остановлена/g, 'PR Out');
                node.textContent = node.textContent.replace(/План. остановка/g, 'Planned');
                // Машины
                node.textContent = node.textContent.replace(/GVCCQ240 S1 HdlE Sys 240 DH40/g, 'DH 40');
                node.textContent = node.textContent.replace(/GVCCA219 S1 HdlE Sys 219 DH19/g, 'DH 19');
                node.textContent = node.textContent.replace(/GVCCB220 S1 HdlE Sys 220 DH20/g, 'DH 20');
                node.textContent = node.textContent.replace(/GVCCC221 S1 HdlE Sys 221 DH21/g, 'DH 21');
                node.textContent = node.textContent.replace(/GVCCD222 S1 HdlE Sys 222 DH22/g, 'DH 22');
                node.textContent = node.textContent.replace(/GVCCE223 S1 HdlE Sys 223 DH23/g, 'DH 23');
                node.textContent = node.textContent.replace(/GVCCH226 S1 HdlE Sys 226 DH26/g, 'DH 26');
                node.textContent = node.textContent.replace(/GVCCL230 S1 HdlE Sys 230 DH30/g, 'DH 30');
                node.textContent = node.textContent.replace(/GVCCM231 S1 HdlE Sys 231 DH31/g, 'DH 31');
                node.textContent = node.textContent.replace(/GVCVC206 S1 MHdl Sys 206 DH06/g, 'DH 06');
                node.textContent = node.textContent.replace(/GVCVF233 S1 MHdl Sys 218 DH33/g, 'DH 33');
                node.textContent = node.textContent.replace(/GVCVG234 S1 MHdl Sys 234 DH34/g, 'DH 34');
                node.textContent = node.textContent.replace(/GVETB211 Fus\/PG MO Sys 211 DH11/g, 'DH 11');
                node.textContent = node.textContent.replace(/GVETC214 Fus\/PG MO Sys 214 DH14/g, 'DH 14');
                node.textContent = node.textContent.replace(/GVFAA216 Agil Hdl Sys 216 DH16/g, 'DH 16');
                node.textContent = node.textContent.replace(/GVFAB217 Agil Hdl Sys 217 DH17/g, 'DH 17');
                node.textContent = node.textContent.replace(/GVFAC218 Agil Hdl Sys 218 DH18/g, 'DH 18');
                node.textContent = node.textContent.replace(/GVFAD209 Agil Hdl Sys 209 DH09/g, 'DH 09');
                node.textContent = node.textContent.replace(/GVMAA210 OffB Hdl Sys 210 DH10/g, 'DH 10');
                node.textContent = node.textContent.replace(/GVMAB213 OffB Hdl Sys 213 DH13/g, 'DH 13');
                node.textContent = node.textContent.replace(/GVMAC215 OffB Hdl Sys 215 DH15/g, 'DH 15');
                node.textContent = node.textContent.replace(/GVCCN232 S1 HdlE Sys 232 DH32/g, 'DH 32');
                node.textContent = node.textContent.replace(/GVDCA235 S2 HdlE Sys 235 DH35/g, 'DH 35');
                node.textContent = node.textContent.replace(/GVFAE236 Agil Hdl Sys 236 DH36/g, 'DH 36');
                node.textContent = node.textContent.replace(/GVFAF237 Agil Hdl Sys 237 DH37/g, 'DH 37');
                node.textContent = node.textContent.replace(/GVPAA238 Perm Hdl Sys 238/g, 'DH 38');
                node.textContent = node.textContent.replace(/GVCCP239 S1 HdlE Sys 239 DH39/g, 'DH 39');

                node.textContent = node.textContent.replace(/GVCHC208 S1 OC Sys 208 DO08/g, 'DO 08');
                node.textContent = node.textContent.replace(/GVCHE211 S1 OC Sys 211 DO11/g, 'DO 11');
                node.textContent = node.textContent.replace(/GVCHA201 S1 OC Sys 201 DO01/g, 'DO 01');
                node.textContent = node.textContent.replace(/GVCHB203 S1 OC Sys 203 DO03/g, 'DO 03');
                node.textContent = node.textContent.replace(/GVCKB203 S1 Plat Sys 203 DA03/g, 'DA 03');
                node.textContent = node.textContent.replace(/GVCKC206 S1 Plat Sys 206 DP06/g, 'DP 06');
                node.textContent = node.textContent.replace(/GVCKE211 S1 Plat Sys 211 DP11/g, 'DP 11');
                node.textContent = node.textContent.replace(/GVCLA205 S1 Cap Sys 205 DA05/g, 'DA 05');
                node.textContent = node.textContent.replace(/GVCLB212 S1 Cap Sys 212 DP12/g, 'DP 12');
                node.textContent = node.textContent.replace(/GVCLC213 S1 Cap Sys 213 DP13/g, 'DP 13');
                node.textContent = node.textContent.replace(/GVCMA201 S1 CapP Sys 201 DA01/g, 'DA 01');
                node.textContent = node.textContent.replace(/GVCMB205 S1 CapP Sys 205 DP05/g, 'DP 05');
                node.textContent = node.textContent.replace(/GVCMC209 S1 CapP Sys 209 DA09/g, 'DA 09');
                node.textContent = node.textContent.replace(/GVCMD210 S1 CapP Sys 210 DA10/g, 'DA 10');
                node.textContent = node.textContent.replace(/GVDHB207 S2 OC Sys 207 DO07/g, 'DO 07');
                node.textContent = node.textContent.replace(/GVDHC210 S2 OC Sys 210 DO10/g, 'DO 10');
                node.textContent = node.textContent.replace(/GVDKB208 S2 Plat Sys 208 DP08/g, 'DP 08');
                node.textContent = node.textContent.replace(/GVDMA210 S2 CapP Sys 210 DP10/g, 'DP 10');
                node.textContent = node.textContent.replace(/GVQEA201 GII Disp Sys 201 DD01/g, 'DD 01');
                node.textContent = node.textContent.replace(/GVQKA206 GII Plat Sys 206 DA06/g, 'DA 06');
                node.textContent = node.textContent.replace(/Сменить/g, 'Switch');
                node.textContent = node.textContent.replace(/% ПП/g, '% PR');
                node.textContent = node.textContent.replace(/Лом/g, 'Scrap');
                node.textContent = node.textContent.replace(/Неплан. Ост\/День/g, '#Unpl Stops\/Day');
            }
        } else if (node.childNodes && node.childNodes.length > 0) {
            node.childNodes.forEach(function(childNode) {
                replaceTextInTextNodes(childNode, language);
            });
        }
    }

    // Функция для выполнения замены текста после выбора языка
    function replaceTextAfterLanguageChange(language) {
        replaceTextInTextNodes(document.body, language);
    }

    // Создаем выпадающее меню для выбора языка
    var languageSelector = document.createElement('select');
    languageSelector.innerHTML = '<option value="Standart">Standart</option><option value="Russian">Russian</option>';
    languageSelector.style.zIndex = '99999';
    languageSelector.style.position = 'fixed';

    languageSelector.addEventListener('change', function(event) {
        var selectedLanguage = event.target.value;
        replaceTextAfterLanguageChange(selectedLanguage);
    });

    var languageSelectorContainer = document.createElement('div');
    languageSelectorContainer.appendChild(languageSelector);
    document.body.appendChild(languageSelectorContainer);

    // Наблюдатель за изменениями DOM
    var observer = new MutationObserver(function(mutationsList) {
        restoreSelectedLanguage();
    });

    observer.observe(document.body, { childList: true, subtree: true });

    function restoreSelectedLanguage() {
        var selectedLanguage = languageSelector.value;
        replaceTextAfterLanguageChange(selectedLanguage);
    }

    function addHideCheckbox(checkboxLabel, elementId) {
        var checkboxContainer = document.createElement('label');
        checkboxContainer.style.fontSize = '14px';
        checkboxContainer.style.fontWeight = 'normal';
        checkboxContainer.style.marginRight = '10px';
        checkboxContainer.style.display = 'inline-flex';
        checkboxContainer.style.alignItems = 'center';
        checkboxContainer.style.flexWrap = 'wrap';
        checkboxContainer.style.cursor = 'pointer';

        var checkbox = document.createElement('input');
        checkbox.type = 'checkbox';
        checkbox.style.display = 'none';
        checkbox.checked = true;
        checkbox.setAttribute('data-element-id', elementId);

        var customCheckbox = document.createElement('div');
        customCheckbox.style.display = 'inline-flex';
        customCheckbox.style.width = '50px';
        customCheckbox.style.height = '25px';
        customCheckbox.style.border = '2px solid #5CFF88';
        customCheckbox.style.backgroundColor = '#FFFFFF';
        customCheckbox.style.borderRadius = '12px';
        customCheckbox.style.justifyContent = 'center';
        customCheckbox.style.alignItems = 'center';
        customCheckbox.style.cursor = 'pointer';
        customCheckbox.style.marginRight = '10px';

        var checkboxText = document.createElement('span');
        checkboxText.textContent = checkboxLabel;
        checkboxText.style.color = '#000000';
        customCheckbox.appendChild(checkboxText);

        function toggleCheckbox() {
            checkbox.checked = !checkbox.checked;
            updateCustomCheckboxStyle(customCheckbox, checkboxText, checkbox.checked);
            toggleElementVisibility(elementId, !checkbox.checked);
        }

        checkboxContainer.addEventListener('click', function(event) {
            event.preventDefault();
            toggleCheckbox();
        });

        checkboxContainer.appendChild(checkbox);
        checkboxContainer.appendChild(customCheckbox);

        return checkboxContainer;
    }

    function updateCustomCheckboxStyle(customCheckbox, checkboxText, isChecked) {
        if (isChecked) {
            customCheckbox.style.border = '2px solid #5CFF88';
            checkboxText.style.color = '#000000';
        } else {
            customCheckbox.style.border = '2px solid #FF6E6E';
            checkboxText.style.color = '#000000';
        }
    }

    // Создаем контейнер для чекбоксов
    var checkboxContainer = document.createElement('div');
    checkboxContainer.style.position = 'fixed';
    checkboxContainer.style.top = '6%';
    checkboxContainer.style.left = '12%';
    checkboxContainer.style.right = '16.5%';
    checkboxContainer.style.zIndex = '1510';
    checkboxContainer.style.background = '#fff';
    checkboxContainer.style.padding = '10px';
    checkboxContainer.style.border = '1px solid #D2FFFE';
    checkboxContainer.style.borderRadius = '10px';

    // Добавляем чекбоксы
    var checkboxes = [
    ["DA 01", "root_mashupcontainer-25_repeater-236-row-39"],
    ["DA 03", "root_mashupcontainer-25_repeater-236-row-40"],
    ["DA 05", "root_mashupcontainer-25_repeater-236-row-37"],
    ["DA 06", "root_mashupcontainer-25_repeater-236-row-45"],
    ["DA 09", "root_mashupcontainer-25_repeater-236-row-34"],
    ["DA 10", "root_mashupcontainer-25_repeater-236-row-35"],
    ["DD 01", "root_mashupcontainer-25_repeater-236-row-47"],
    ["DH 06", "root_mashupcontainer-25_repeater-236-row-21"],
    ["DH 09", "root_mashupcontainer-25_repeater-236-row-14"],
    ["DH 10", "root_mashupcontainer-25_repeater-236-row-23"],
    ["DH 11", "root_mashupcontainer-25_repeater-236-row-46"],
    ["DH 13", "root_mashupcontainer-25_repeater-236-row-25"],
    ["DH 14", "root_mashupcontainer-25_repeater-236-row-31"],
    ["DH 15", "root_mashupcontainer-25_repeater-236-row-24"],
    ["DH 16", "root_mashupcontainer-25_repeater-236-row-13"],
    ["DH 17", "root_mashupcontainer-25_repeater-236-row-17"],
    ["DH 18", "root_mashupcontainer-25_repeater-236-row-18"],
    ["DH 19", "root_mashupcontainer-25_repeater-236-row-2"],
    ["DH 20", "root_mashupcontainer-25_repeater-236-row-3"],
    ["DH 21", "root_mashupcontainer-25_repeater-236-row-4"],
    ["DH 22", "root_mashupcontainer-25_repeater-236-row-5"],
    ["DH 23", "root_mashupcontainer-25_repeater-236-row-6"],
    ["DH 26", "root_mashupcontainer-25_repeater-236-row-7"],
    ["DH 30", "root_mashupcontainer-25_repeater-236-row-11"],
    ["DH 31", "root_mashupcontainer-25_repeater-236-row-12"],
    ["DH 32", "root_mashupcontainer-25_repeater-236-row-8"],
    ["DH 33", "root_mashupcontainer-25_repeater-236-row-19"],
    ["DH 34", "root_mashupcontainer-25_repeater-236-row-20"],
    ["DH 35", "root_mashupcontainer-25_repeater-236-row-10"],
    ["DH 36", "root_mashupcontainer-25_repeater-236-row-15"],
    ["DH 37", "root_mashupcontainer-25_repeater-236-row-16"],
    ["DH 38", "root_mashupcontainer-25_repeater-236-row-22"],
    ["DH 39", "root_mashupcontainer-25_repeater-236-row-9"],
    ["DH 40", "root_mashupcontainer-25_repeater-236-row-1"],
    ["DO 01", "root_mashupcontainer-25_repeater-236-row-26"],
    ["DO 03", "root_mashupcontainer-25_repeater-236-row-27"],
    ["DO 07", "root_mashupcontainer-25_repeater-236-row-28"],
    ["DO 08", "root_mashupcontainer-25_repeater-236-row-32"],
    ["DO 10", "root_mashupcontainer-25_repeater-236-row-29"],
    ["DO 11", "root_mashupcontainer-25_repeater-236-row-30"],
    ["DP 05", "root_mashupcontainer-25_repeater-236-row-33"],
    ["DP 08", "root_mashupcontainer-25_repeater-236-row-38"],
    ["DP 10", "root_mashupcontainer-25_repeater-236-row-36"],
    ["DP 11", "root_mashupcontainer-25_repeater-236-row-41"],
    ["DP 12", "root_mashupcontainer-25_repeater-236-row-43"],
    ["DP 13", "root_mashupcontainer-25_repeater-236-row-44"],
    ["DP 14", "root_mashupcontainer-25_repeater-236-row-42"]
    ];

    checkboxes.forEach(function(checkbox) {
        checkboxContainer.appendChild(addHideCheckbox(checkbox[0], checkbox[1]));
    });

    // Функция для обработки клика на кнопку "Включить/отключить все"
    function toggleAllCheckboxes(checkboxContainers, toggle) {
        for (var i = 0; i < checkboxContainers.length; i++) {
            var checkbox = checkboxContainers[i].querySelector('input[type="checkbox"]');
            var customCheckbox = checkboxContainers[i].querySelector('div');
            var checkboxText = customCheckbox.querySelector('span');
            var elementId = checkbox.getAttribute('data-element-id');

            checkbox.checked = toggle;
            updateCustomCheckboxStyle(customCheckbox, checkboxText, toggle);
            toggleElementVisibility(elementId, !toggle);
        }
    }

    // Добавляем кнопку "Включить/отключить все"
    var toggleAllButton = document.createElement('button');
    toggleAllButton.textContent = 'Switch';
    toggleAllButton.style.background = '#D2FFFE';
    toggleAllButton.style.color = '#000';
    toggleAllButton.style.border = '2px solid #C6FCE6';
    toggleAllButton.style.borderRadius = '5px';
    toggleAllButton.style.padding = '5px 10px';
    var allCheckboxContainers = checkboxContainer.querySelectorAll('label');
    var allChecked = true;

    toggleAllButton.addEventListener('click', function() {
        allChecked = !allChecked;
        toggleAllCheckboxes(allCheckboxContainers, allChecked);
        toggleAllButton.textContent = 'Switch';
    });

    checkboxContainer.appendChild(toggleAllButton);

    // Добавляем контейнер с чекбоксами и кнопкой на страницу
    document.body.appendChild(checkboxContainer);

    // Дополнительные функции для стилизации элементов
    function StatisticBlock() {
        setTimeout(function() {
            const element = document.querySelector("#root_mashupcontainer-25_Container-93");
            if (element) {
                element.style.borderRadius = "20px 0 0 20px";
                element.style.opacity = "0.8";
            }
        }, 1000);
    }

    function TooltipMenuDown() {
        setTimeout(function() {
            const elementGreen = document.querySelector("#root_mashupcontainer-25_LabelResponsive-171");
             if (elementGreen) {
                 elementGreen.style.borderRadius = "6px 6px 0 0";
                 elementGreen.style.width = "98%";
               }
                  const elementRed = document.querySelector("#root_mashupcontainer-25_LabelResponsive-172");
             if (elementRed) {
                 elementRed.style.borderRadius = "6px 6px 0 0";
                 elementRed.style.width = "98%";
            }
                  const elementBlue = document.querySelector("#root_mashupcontainer-25_LabelResponsive-173");
             if (elementBlue) {
                 elementBlue.style.borderRadius = "6px 6px 0 0";
                 elementBlue.style.width = "98%";
            }
                  const elementYellow = document.querySelector("#root_mashupcontainer-25_LabelResponsive-174");
             if (elementYellow) {
                 elementYellow.style.borderRadius = "6px 6px 0 0";
                 elementYellow.style.width = "98%";
            }
             const ToolTipAll = document.querySelector("#root_mashupcontainer-25_Layout-6 > div > div.layout-vert-responsive-row.automatically-resize-contents.last-responsive-row");
             if (ToolTipAll) {
                 ToolTipAll.style.height = "6%";
                 ToolTipAll.style.top = "94%";
             }
        }, 1000);
    }

    function DropMenuBorder() {
        setTimeout(function() {
            const selectElement = document.querySelector("#root_ptcsdropdown-27").shadowRoot.querySelector("#select");
            if (selectElement) {
                selectElement.style.borderRadius = "20px";
            }
        }, 1000);
    }

    function applyStylesToElement(element) {
        if (element) {
            element.style.border = "1px solid";
            element.style.borderRadius = "20px";
        }
    }

    function observeDOM() {
        const targetNode = document.body;
        const observer = new MutationObserver(function(mutationsList) {
            for (const mutation of mutationsList) {
                if (mutation.type === 'childList') {
                    const element = document.querySelector("#root_ptcsdropdown-27-external-wc");
                    applyStylesToElement(element);
                }
            }
        });
        const config = { childList: true, subtree: true };
        observer.observe(targetNode, config);
    }

    function executeAfterPageLoad() {
        DropMenuBorder();
    }

    // Ожидание события загрузки страницы
    window.addEventListener('load', function() {
        executeAfterPageLoad();
        observeDOM();
        StatisticBlock();
        TooltipMenuDown();
    });

})();
